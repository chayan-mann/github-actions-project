name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo:${{ github.sha }} .

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo:${{ github.sha }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "üîÑ Deploying new Docker container..."

            # Stop ALL containers using port 80 to prevent conflicts
            docker ps --format "table {{.Names}}\t{{.Ports}}" | grep ":80->" | awk '{print $1}' | xargs -r docker stop || true
            docker ps -a --format "table {{.Names}}\t{{.Ports}}" | grep ":80->" | awk '{print $1}' | xargs -r docker rm || true

            # Also specifically target our app container
            docker stop app || true
            docker rm app || true

            # Pull the latest image
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo:${{ github.sha }}

            # Remove old images to save space (keep last 3)
            docker images ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}" | tail -n +4 | awk '{print $2}' | xargs -r docker rmi || true

            # Run new container with correct port mapping (8000 is your app port)
            docker run -d -p 80:8000 --name app --restart unless-stopped ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo:${{ github.sha }}

            # Verify deployment
            sleep 5
            if docker ps | grep -q "app"; then
              echo "‚úÖ Deployment successful!"
              echo "üåê App should be available at http://$(curl -s ifconfig.me)"
            else
              echo "‚ùå Deployment failed - container not running"
              docker logs app
              exit 1
            fi
