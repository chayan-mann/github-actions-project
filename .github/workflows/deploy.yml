name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16, 18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo:${{ github.sha }} .

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo:${{ github.sha }}

      - name: Deploy to EC2
        if: success()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "ðŸ”„ Deploying new Docker container..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo:${{ github.sha }}
            docker stop app || true
            docker rm app || true
            docker run -d -p 80:3000 --name app ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo:${{ github.sha }}
            echo "âœ… Deployment successful!"

